package com.zw.common;

import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.util.CollectionUtils;
/**
 * Redis工具类
 * @author zhengwei
 *
 */
public class RedisUtil {
	private RedisTemplate<String, Object> redisTemplate;

	public void setRedisTemplate(RedisTemplate<String, Object> redisTemplate) {
		this.redisTemplate = redisTemplate;
	}
	/**
	 * 指定缓存失效时间
	 * @param key
	 * @param time
	 * @return
	 */
	public boolean expire(String key,long timeout) {
		if (timeout>0) {
			redisTemplate.expire(key, timeout, TimeUnit.SECONDS);
			return true;
		}else {
			return false;
		}
	}
	/**
	 * 根据key获取失效时间
	 * @param key
	 * @return 时间(秒) 返回0代表为永久有效
	 */
	public long getExpire(String key) {
		return redisTemplate.getExpire(key);
	}
	/**
	 * 判断key是否存在
	 * @param key
	 * @return
	 */
	public boolean hashKey(String key) {
		return redisTemplate.hasKey(key);
	}
	/**
	 * 删除缓存
	 * @param key
	 */
	public void del(String...keys) {
		if (keys!=null&&keys.length>0) {
			if (keys.length==1) {
				redisTemplate.delete(keys[0]);
			}else {
				redisTemplate.delete(CollectionUtils.arrayToList(keys));
			}
		}
	}
	/********************************String*******************************************/
	/**
	 * 普通缓存获取
	 * @param key
	 * @return
	 */
	public Object get(String key) {
		return null==key?null:redisTemplate.opsForValue().get(key);
	}
	/**
	 * 普通缓存放入
	 * @param key
	 * @param value
	 * @return
	 */
	public boolean set(String key,Object value) {
		try {
			redisTemplate.opsForValue().set(key, value);
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
	/**
	 * 普通缓存放入并设置时间
	 * @param key
	 * @param value
	 * @param timeout
	 * @return
	 */
	public boolean set(String key,Object value,long timeout) {
		try {
			if (timeout>0) {
				redisTemplate.opsForValue().set(key, value, timeout, TimeUnit.SECONDS);
			}else {
				set(key, value);
			}
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
	/**
	 * 递增
	 * @param key
	 * @param delta 要增加几(大于0)
	 * @return
	 */
	public long incr(String key,long delta) {
		if (delta<0) {
			throw new RuntimeException("递减因子必须大于0");
		}
		return redisTemplate.opsForValue().increment(key, delta);
	}
	/**
	 * 递减
	 * @param key
	 * @param delta
	 * @return
	 */
	public long decr(String key,long delta) {
		if (delta<0) {
			throw new RuntimeException("递减因子必须大于0");
		}
		return redisTemplate.opsForValue().increment(key, -delta);
	}
	/***********************Map**************************************/
	/**
	 * HashGet
	 * @param key
	 * @param item
	 * @return
	 */
	public Object hget(String key,String item) {
		return redisTemplate.opsForHash().get(key, item);
	}
	/**
	 * 根据key取出值
	 * @param key
	 * @return
	 */
	public Map<Object,Object> hmget(String key) {
		return redisTemplate.opsForHash().entries(key);
	}
	/**
	 * 向一张hash表中放入数据,如果不存在将创建
	 * @param key
	 * @param item
	 * @param value
	 * @return
	 */
	public boolean hset(String key,String item,Object value) {
		try {
			redisTemplate.opsForHash().put(key, item, value);
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
	/**
	 * HashSet 并设置时间
	 * @param key
	 * @param map 对应多个键值
	 * @param time 时间(秒)
	 * @return
	 */
	public boolean hmset(String key,Map<Object,Object> map) {
		try {
			redisTemplate.opsForHash().putAll(key, map);
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
	/**
	 * HashSet 并设置时间
	 * @param key
	 * @param map
	 * @param timeout 超时时间,注意:如果已存在的hash表有时间,这里将会替换原有的时间
	 * @return
	 */
	public boolean hmset(String key,Map<Object,Object> map,long timeout) {
		try {
			redisTemplate.opsForHash().putAll(key, map);
			if (timeout>0) {
				expire(key, timeout);
			}
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
	/**
	 * 删除hash表中的值
	 * @param key
	 * @param items 可以是多个 不能为null
	 */
	public void hdel(String key,Object...items) {
		redisTemplate.opsForHash().delete(key, items);
	}
	/**
	 * 判断hash表中是否有该项的值
	 * @param key
	 * @param item
	 * @return
	 */
	public boolean hHasKey(String key,String item) {
		return redisTemplate.opsForHash().hasKey(key, item);
	}
	/**
	 * hash递增 如果不存在,就会创建一个 并把新增后的值返回 
	 * @param key
	 * @param item
	 * @param by 要增加几(大于0)
	 * @return
	 */
	public double hincr(String key,String item,long by) {
		return redisTemplate.opsForHash().increment(key, item, by);
	}
	/**
	 * hash递减 
	 * @param key
	 * @param item
	 * @param by 要减少记(小于0)
	 * @return
	 */
	public double hdecr(String key,String item,long by) {
		return redisTemplate.opsForHash().increment(key, item, -by);
	}
	//*****************************set************************************
	/**
	 * 根据key获取Set中的所有值
	 * @param key
	 * @return
	 */
	public Set<Object> sGet(String key){
		try {
			return redisTemplate.opsForSet().members(key);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	/**
	 * 根据value从一个set中查询,是否存在
	 * @param key
	 * @param value
	 * @return
	 */
	public boolean sHasKey(String key,Object value) {
		try {
			return redisTemplate.opsForSet().isMember(key, value);
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
	
	public Boolean sSet(String key,Object...values) {
		try {
			return redisTemplate.opsForSet().add(key, values);
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
}
